// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf.proto</summary>
  public static partial class ProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Qcm90b2J1Zi5wcm90bxIIcHJvdG9idWYiKgoFR29vZHMSIQoHd2VhcG9u",
            "cxgBIAMoCzIQLnByb3RvYnVmLldlYXBvbiKWAgoGV2VhcG9uEgoKAklEGAEg",
            "ASgJEgwKBFR5cGUYAiABKAkSDAoEUGFydBgDIAEoCRIRCglSYXJlTGV2ZWwY",
            "BCABKAUSEAoIU3RvcmVOdW0YBSABKAMSEQoJU3RhY2tEcm9wGAYgASgFEhEK",
            "CUxvb3RTY29yZRgHIAEoBRIPCgdOYW1lSURTGAggASgJEhYKDkRlc2NyaXB0",
            "aW9uSURTGAkgASgJEgwKBEljb24YCiABKAkSEAoISW5zdGFuY2UYCyABKAkS",
            "EQoJRm9ybXVsYUlEGAwgASgNEhMKC0Ryb3BLaW5nZG9tGA0gASgJEhAKCERl",
            "b3BQYWdlGA4gASgJEhYKDkNvcnBMZXZlbExpbWl0GA8gASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Goods), global::Protobuf.Goods.Parser, new[]{ "Weapons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Weapon), global::Protobuf.Weapon.Parser, new[]{ "ID", "Type", "Part", "RareLevel", "StoreNum", "StackDrop", "LootScore", "NameIDS", "DescriptionIDS", "Icon", "Instance", "FormulaID", "DropKingdom", "DeopPage", "CorpLevelLimit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Goods : pb::IMessage<Goods> {
    private static readonly pb::MessageParser<Goods> _parser = new pb::MessageParser<Goods>(() => new Goods());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Goods> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.ProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods(Goods other) : this() {
      weapons_ = other.weapons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods Clone() {
      return new Goods(this);
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.Weapon> _repeated_weapons_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.Weapon.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Weapon> weapons_ = new pbc::RepeatedField<global::Protobuf.Weapon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Weapon> Weapons {
      get { return weapons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Goods);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Goods other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!weapons_.Equals(other.weapons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= weapons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      weapons_.WriteTo(output, _repeated_weapons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Goods other) {
      if (other == null) {
        return;
      }
      weapons_.Add(other.weapons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Weapon : pb::IMessage<Weapon> {
    private static readonly pb::MessageParser<Weapon> _parser = new pb::MessageParser<Weapon>(() => new Weapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Weapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.ProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon(Weapon other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      part_ = other.part_;
      rareLevel_ = other.rareLevel_;
      storeNum_ = other.storeNum_;
      stackDrop_ = other.stackDrop_;
      lootScore_ = other.lootScore_;
      nameIDS_ = other.nameIDS_;
      descriptionIDS_ = other.descriptionIDS_;
      icon_ = other.icon_;
      instance_ = other.instance_;
      formulaID_ = other.formulaID_;
      dropKingdom_ = other.dropKingdom_;
      deopPage_ = other.deopPage_;
      corpLevelLimit_ = other.corpLevelLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon Clone() {
      return new Weapon(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Part" field.</summary>
    public const int PartFieldNumber = 3;
    private string part_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Part {
      get { return part_; }
      set {
        part_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RareLevel" field.</summary>
    public const int RareLevelFieldNumber = 4;
    private int rareLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RareLevel {
      get { return rareLevel_; }
      set {
        rareLevel_ = value;
      }
    }

    /// <summary>Field number for the "StoreNum" field.</summary>
    public const int StoreNumFieldNumber = 5;
    private long storeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StoreNum {
      get { return storeNum_; }
      set {
        storeNum_ = value;
      }
    }

    /// <summary>Field number for the "StackDrop" field.</summary>
    public const int StackDropFieldNumber = 6;
    private int stackDrop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackDrop {
      get { return stackDrop_; }
      set {
        stackDrop_ = value;
      }
    }

    /// <summary>Field number for the "LootScore" field.</summary>
    public const int LootScoreFieldNumber = 7;
    private int lootScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LootScore {
      get { return lootScore_; }
      set {
        lootScore_ = value;
      }
    }

    /// <summary>Field number for the "NameIDS" field.</summary>
    public const int NameIDSFieldNumber = 8;
    private string nameIDS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameIDS {
      get { return nameIDS_; }
      set {
        nameIDS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DescriptionIDS" field.</summary>
    public const int DescriptionIDSFieldNumber = 9;
    private string descriptionIDS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionIDS {
      get { return descriptionIDS_; }
      set {
        descriptionIDS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 10;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Instance" field.</summary>
    public const int InstanceFieldNumber = 11;
    private string instance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instance {
      get { return instance_; }
      set {
        instance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FormulaID" field.</summary>
    public const int FormulaIDFieldNumber = 12;
    private uint formulaID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaID {
      get { return formulaID_; }
      set {
        formulaID_ = value;
      }
    }

    /// <summary>Field number for the "DropKingdom" field.</summary>
    public const int DropKingdomFieldNumber = 13;
    private string dropKingdom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DropKingdom {
      get { return dropKingdom_; }
      set {
        dropKingdom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeopPage" field.</summary>
    public const int DeopPageFieldNumber = 14;
    private string deopPage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeopPage {
      get { return deopPage_; }
      set {
        deopPage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CorpLevelLimit" field.</summary>
    public const int CorpLevelLimitFieldNumber = 15;
    private int corpLevelLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CorpLevelLimit {
      get { return corpLevelLimit_; }
      set {
        corpLevelLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Weapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Weapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (Part != other.Part) return false;
      if (RareLevel != other.RareLevel) return false;
      if (StoreNum != other.StoreNum) return false;
      if (StackDrop != other.StackDrop) return false;
      if (LootScore != other.LootScore) return false;
      if (NameIDS != other.NameIDS) return false;
      if (DescriptionIDS != other.DescriptionIDS) return false;
      if (Icon != other.Icon) return false;
      if (Instance != other.Instance) return false;
      if (FormulaID != other.FormulaID) return false;
      if (DropKingdom != other.DropKingdom) return false;
      if (DeopPage != other.DeopPage) return false;
      if (CorpLevelLimit != other.CorpLevelLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Part.Length != 0) hash ^= Part.GetHashCode();
      if (RareLevel != 0) hash ^= RareLevel.GetHashCode();
      if (StoreNum != 0L) hash ^= StoreNum.GetHashCode();
      if (StackDrop != 0) hash ^= StackDrop.GetHashCode();
      if (LootScore != 0) hash ^= LootScore.GetHashCode();
      if (NameIDS.Length != 0) hash ^= NameIDS.GetHashCode();
      if (DescriptionIDS.Length != 0) hash ^= DescriptionIDS.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Instance.Length != 0) hash ^= Instance.GetHashCode();
      if (FormulaID != 0) hash ^= FormulaID.GetHashCode();
      if (DropKingdom.Length != 0) hash ^= DropKingdom.GetHashCode();
      if (DeopPage.Length != 0) hash ^= DeopPage.GetHashCode();
      if (CorpLevelLimit != 0) hash ^= CorpLevelLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Part.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Part);
      }
      if (RareLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RareLevel);
      }
      if (StoreNum != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StoreNum);
      }
      if (StackDrop != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StackDrop);
      }
      if (LootScore != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LootScore);
      }
      if (NameIDS.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NameIDS);
      }
      if (DescriptionIDS.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DescriptionIDS);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Icon);
      }
      if (Instance.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Instance);
      }
      if (FormulaID != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FormulaID);
      }
      if (DropKingdom.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DropKingdom);
      }
      if (DeopPage.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DeopPage);
      }
      if (CorpLevelLimit != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CorpLevelLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Part.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Part);
      }
      if (RareLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RareLevel);
      }
      if (StoreNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StoreNum);
      }
      if (StackDrop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackDrop);
      }
      if (LootScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LootScore);
      }
      if (NameIDS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameIDS);
      }
      if (DescriptionIDS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionIDS);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Instance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instance);
      }
      if (FormulaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaID);
      }
      if (DropKingdom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DropKingdom);
      }
      if (DeopPage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeopPage);
      }
      if (CorpLevelLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CorpLevelLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Weapon other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Part.Length != 0) {
        Part = other.Part;
      }
      if (other.RareLevel != 0) {
        RareLevel = other.RareLevel;
      }
      if (other.StoreNum != 0L) {
        StoreNum = other.StoreNum;
      }
      if (other.StackDrop != 0) {
        StackDrop = other.StackDrop;
      }
      if (other.LootScore != 0) {
        LootScore = other.LootScore;
      }
      if (other.NameIDS.Length != 0) {
        NameIDS = other.NameIDS;
      }
      if (other.DescriptionIDS.Length != 0) {
        DescriptionIDS = other.DescriptionIDS;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Instance.Length != 0) {
        Instance = other.Instance;
      }
      if (other.FormulaID != 0) {
        FormulaID = other.FormulaID;
      }
      if (other.DropKingdom.Length != 0) {
        DropKingdom = other.DropKingdom;
      }
      if (other.DeopPage.Length != 0) {
        DeopPage = other.DeopPage;
      }
      if (other.CorpLevelLimit != 0) {
        CorpLevelLimit = other.CorpLevelLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Part = input.ReadString();
            break;
          }
          case 32: {
            RareLevel = input.ReadInt32();
            break;
          }
          case 40: {
            StoreNum = input.ReadInt64();
            break;
          }
          case 48: {
            StackDrop = input.ReadInt32();
            break;
          }
          case 56: {
            LootScore = input.ReadInt32();
            break;
          }
          case 66: {
            NameIDS = input.ReadString();
            break;
          }
          case 74: {
            DescriptionIDS = input.ReadString();
            break;
          }
          case 82: {
            Icon = input.ReadString();
            break;
          }
          case 90: {
            Instance = input.ReadString();
            break;
          }
          case 96: {
            FormulaID = input.ReadUInt32();
            break;
          }
          case 106: {
            DropKingdom = input.ReadString();
            break;
          }
          case 114: {
            DeopPage = input.ReadString();
            break;
          }
          case 120: {
            CorpLevelLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
